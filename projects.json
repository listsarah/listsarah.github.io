[
    {
        "title": "Turtlebot SLAM",
        "description": "Simultaneous Localization and Mapping Implementation on a Turtlebot. Robot explores, maps, and navigates a static, unknown maze. A* Path Planning was implemented to improve navigational efficiency.",
        "skills" : ["Programming", "Robotics", "Algorithms"],
        "what_it_does":"This project was completed for RBE 3002 a junior-level Robotics Engineering undergraduate course at Worcester Polytechnic Institute. I worked with a team to implement simultaneous localization and mapping (SLAM) using ROS on a TurtleBot to allow it to explore and navigate an unknown maze.",
        "technical_details": "This project consisted of two phases. The first phase involves the mapping of the unknown maze. The robot is first placed in a random location in the maze. The TurtleBot then navigates the maze until all unknown frontiers are explored. The frontiers are prioritized by location, size, and density. The GMapping package is used during this phase as it implements a particle filter to allow for localization and construction of the map using the LIDAR. \n\n Once the map of the maze is constructed, the second phase commences. The robot is 'kidnapped' and moved to a random location in the map. The robot then localizes itself and then drives to the location specified on the map. The AMCL packages was used for localization using a particle filter. \n\n Through this process, a wall avoidance A* algorithm is used for path planning. An e-stop was implemented on the robot level to ensure the robot does not run into any unforeseen walls. A pure pursuit drive controller was implemented to improve efficiency.",
        "media_links" : ["/static/project_media/3002_video.mp4", "/static/project_media/astar.png"],
        "media_descriptions" : ["Stage 1: Mapping", "Wall Avoidant A* (left) vs. Shortest Path A* (right)", "Video"],
        "completion_date": "December 2024",
        "collaborators": ["Zachary Serocki", "Alexander Kraemling", "Benjamin Penti"],
        "paper_link" : "/static/project_media/RBE_3002_Final.pdf"
    },
    {
        "title": "PIP",
        "description": "A web application designed to allow WPI students to plan their schedules and view course reports for relevant courses. It also optimizes the students schedule based on the factors chosen by the student.",
        "skills" : ["Web Development", "Programming"],
        "what_it_does": "The Personal Integrated Planner (PIP) is a project I worked on in collaboration with a team in CS3733, a Software Engineering class at Worcester Polytechnic Institute. PIP is a web application designed to allow WPI students to plan their schedule more efficently by utilizing a scheduling feature as well as the ability to view the relevent course reports to each class. It combines the features of the WPI Planner, a course planning application, and Online Student Course Reports (OSCAR). It also implements an optimization feature to allow students to optimize their schedule based on factors such as professor rating, start time, clustering, and others.",
        "technical_details": "PIP is a web application using Flask. The frontend is created using HTML, Javascript, and CSS. This projects implements several main features: Course Scheduling, Course Report Views, Schedule Optimization, Schedule Exporting, as well as Workday Course Sinking by Administrators \n \n The Course Scheduling allows the user to search for and add courses to their schedule. They can search through courses that are added to the database through an automatic syncing from the WPI Workday Course Database. Once they add a course, it appears on their schedule. The user can edit the course sections and terms they are taking the class using a sidebar window. \n \n Once a course is added to the student's schedule, if the student clicks on the course, they are brought to the relevent course reports. They are shown graphs showing various metrics of the course such as the grade received, course organization, time spent, and others. The student can also toggle between other course reports from other sections of the same course, as well as other courses taught by the same professor. \n \n The student can use the schedule optimize feature to create an optimal schedule based on the linear combination of factors such as the professor quality, start time, and the spacing of courses. This produces a nearly optimal schedule (not guaranteed to be optimal due to a cut off time implemented due to large sample space). \n \n Once the student is satisfied with the schedule created, the student can export the schedule to an .ics file that allows to be imported into their calender application of choice. Multiple schedules can also be created allowing the student to prototype. \n \n Administrators can also search and view details about courses, as well as begin Workday schedule syncs to keep the courses up to date.",
        "media_links" : ["/static/project_media/pip_video.mp4","/static/project_media/Schedule - Dark.png","/static/project_media/Ratings - Dark.png", "/static/project_media/Planner.drawio.png","/static/project_media/component_diagram.png"],
        "media_descriptions" : ["PIP App Demo Video", "Schedule Page", "Course Ratings Page", "UML Diagram", "PIP Component Diagram"],
        "completion_date": "March 2025",
        "collaborators": ["Zachary Serocki", "Dylan Schmit", "Nikhil Gangaram"],
        "paper_link" : "/static/project_media/pip.pdf"
    },
    {
        "title": "Turned Pens",
        "description": "Aluminum and Brass Pens turned on a manual lathe as a manual lathe training project. Designed to accommodate Pilot G2 ink cartridges.",
        "skills" : ["Manufacturing", "Mechanical"],
        "what_it_does": "This project was created to accompany a mechanical pencil I made on the manual lathe as an equipment training project. This pen was designed to work with Pilot G2 ink cartridges. It uses a J-slot with a threaded bolt turned out of brass to engage the ink cartridge. It was created primarily on the lathe, with the J-slot milled on a Bridgeport.",
        "technical_details": "The tip as well as the bolt action mechanism were made out of brass to increase lifespan as well as improve the balance of the pen. The rest of the parts were made out of aluminum. The bolt was turned on the lathe and later knurled.",
        "media_links" : ["/static/project_media/pen.mp4", "/static/project_media/manual_lathe_pen.png"],
        "media_descriptions" : ["Turned Pen Bolt Action", "Rough Draft of Mechanical Drawing"],
        "completion_date": "May 2025"
    },
    {
        "title": "Serial Manipulator",
        "description": "A 4-DOF robotic arm was programmed using MATLAB to identify and sort colored objects. Computer Vision was used to determine the location of each object on a checkerboard.",
        "skills" : ["Programming", "Robotics", "Computer Vision"],
        "what_it_does": "This project was completed for RBE 3001, a junior-level Robotics Engineering Course for Worcester Polytechnic Institute. In this project we used computer vision to determine the location of various colored objects on a checkered board. The Newton-Raphson method for Inverse Kinematics was used to determine the joint locations to send the robot on each location on its trajectory to pick up the object.",
        "technical_details": "Control for a four degree of freedom articulated arm was implemented to allow the robot to detect and sort five different colored balls. Forward Kinematics was implemented to determine the position of the end effector of the robot in task space. Differential Kinematics was then implemented to allow for conversion between joint velocities and end effector velocities. Inverse Kinematics was implemented to determine the joint angles required to reach a point Task Space. Trajectory planning functions were created to allow for quintic task space trajectory planning. Camera Vision was then implemented to allow the robot to recognize and differentiate between colored balls in the task space. A state machine was then implemented to determine the location of the objects, generate a trajectory to an object, move it to the correct color bin, and return to grab the next object.",
        "media_links" : ["/static/project_media/RoboticArm.mp4"],
        "media_descriptions" : ["Color Sorting Robotic Arm Video"],
        "completion_date": "October 2024",
        "collaborators": ["Zachary Serocki", "Alexander Kraemling"],
        "paper_link" : "/static/project_media/3001_paper.pdf"
    },
    {
        "title": "Tool Change Robot",
        "description": "An automated tool change station for the HydroFlex technology. Uses Micro-TIG welding process to replace the grinding wheel autonomously.",
        "skills" : ["Programming", "Robotics", "Electrical", "Mechanical"],
        "what_it_does": "This project was created for the Major Qualifying Project (MQP) at Worcester Polytechnic Institute. To improve surface finish in complex internal channels, HydroFlex technology uses a flexible 304V stainless steel shaft with an attached grinding wheel. This wheel wears every 10â€“15 minutes and must be replaced, requiring manual intervention that disrupts the process. This project implements an automated system for grinding wheel replacement, using a programmed robotic station to precisely remove old wheels and weld new ones. Design iterations improved mechanical positioning, and various programming techniques were incorporated for automatic error correction of the shafts. The selected pulse arc welding process resulted in an average maximum torque of 10.97 mNm (SD=1.05) for connected shafts with acetone surface preparation, maintaining 50.83% of its strength compared to the maximum torque of the shaft alone. By enabling continuous operation and efficient tool changes, this advancement lays the groundwork for scaling HydroFlex to high-volume production, allowing parts to be refurbished instead of discarded, reducing both waste and cost.",
        "technical_details": "This Tool Change Robot integrates with the Universal Robotic (UR) Arm as was previously used by the HydroFlex system. This system includes two main parts, the attachment to the UR arm, and the welding station. \n \n The wire fixturing attachment was used to ground and prevent slippage of the wire during the welding process. The wire fixturing attachment uses a servo with a pinion gear and two rack gears. The rack gears have a copper sheeting to allow the wire to be grounding for the welding process as well as for continuity checking to determine the quality of the weld. \n \n The welding stations uses a v-channel system to guide the wire into the proper position for welding. A modified break-beam sensor is used to determine when the wire has reached the correct position, to tell the UR robot to stop. A clamping mechanism is used on the station, also coated with a copper sheeting to provide additional grounding and weld quality sensing capabilities. The welder is attached to a rack and pinion gear system to provide linear motion, moving the welder to the wire, to weld and unweld the wire. The welding station also contains a wire feeding system to move the new grinding wheel into position for welding using a rack and pinion gear system. The old grinding wheel is discarded using a swing arm on the v-channel. \n \n The welding process works by first moving the robot with the wire from the current channel being finished, the wire is moved through the v-channel until the break-beam sensor is triggered. The UR robot is then halted. The wire is clamped and grounded on both ends. The welder is then moved into contact with the wire to break the wire. The old grinding wheel is then dropped into the collection bin and a new one is pushed in. The new grinding wheel is then welded to the old wire and the robot can go back into service. \n \n Throughout this process, various error correction mechanisms are added to improve the reliability fo the system. The continuity of the wire is checked during unwelding and rewelding to ensure that the process was completed successfully. The positioning can also be checked during the positioning of the new grinding wheel.",
        "media_links" : ["/static/project_media/MQP_movie.mp4","/static/project_media/Wire_fixturing_mechanism.jpg", "/static/project_media/full_box_interface.png", "/static/project_media/wireHolderNoFrontPlate.png"],
        "media_descriptions" : ["Tool Change Robot Video", "Wire Fixturing and Grounding Mechanism", "Welding Station CAD", "Universal Robot Wire Fixturing Attachment"],
        "completion_date": "May 2025",
        "collaborators": ["Natalie Carrington", "Alfredo Sanchez", "Benjamin Hayden"],
        "paper_link" : "https://digital.wpi.edu/concern/student_works/df65vd23q"
    },
    {
        "title": "Is My House on Fire",
        "description": "A camera is pointed at the oven with computer vision running on a cloud server to detect if the oven is on. The user connects to their device on the website, allowing them to view the state and recent history of the oven.",
        "skills" : ["Programming", "Web Development", "Computer Vision"],
        "what_it_does": "This project was created with a team from Worcester Polytechnic Institute for the UMass Amherst Hackathon, HackUMass. We have all experienced the fear of leaving our stoves on and causing a fire. Is my house on fire? provides peace of mind, knowing that your oven is off and your house is likely not on fire.",
        "technical_details": "We setup a raspberrypi with a webcam to point at one of our ovens and detect when the light is on using the CV2 library. We then built a React website to allow us to check on the status of our stoves. We used Mongo DB Atlas's time series feature to keep an accurate and efficient history of the ovens status at any given time. \n \n A common pitfall of IoT devices is that they often fall out of date and are difficult to support. To combat this, we build an API versioning deployment system using Terraform. The system deploys both the react site and back end API. It passes the React Site a variable informing it of the most recent API version, so it is always up to date, but outdated raspberry pis can still use old API versions. If the most recent API is at api3.ismyhouseonfire.tech, it will deploy the new API to api4.ismyhouseonfire.tech while still keeping previous versions online.",
        "media_links" : ["/static/project_media/ismyhouseonfire.mp4", "/static/project_media/house_fire_logo.png"],
        "media_descriptions" : ["Is My House on Fire Video Demo", "Is My House on Fire Logo"],
        "completion_date": "November 2024",
        "collaborators": ["Liza Levin", "Skyler Wiernik"],
        "code_link": "https://github.com/listsarah/HackUMass24"
    },
    {
        "title": "Chess Bot",
        "description": "A Chess bot programmed in C++ with a UCI interface to allow for integration into common chess GUIs. Uses the Min-Max algorithm with a combination of heuristics and a fixed search depth to determine the best next move.",
        "skills" : ["Programming", "Algorithms"],
        "what_it_does": "This project is a Chess Bot that I created entirely in C++ to compete with the chessbots programmed by some friends. I added a Universal Chess Interface (UCI) to this bot to interface with various chess GUIs for a better user experience. It uses a Min-Max algorithm with a lookahead distance to determine the best move.",
        "technical_details": "This chessbot uses a 64-bit integer to store the state of the board to improve speed and memory efficiency. Each piece type has its own 64-bit board to store the current state of that piece. \n \n To determine the legal moves available to the bot, the indices to which each of the pieces can move are programmed. Each of these indices are then checked to determine if they contain a legal move for the piece. Should the move be legal, it is added to a list of possible moves. Each of these moves are then completed, and the same is done for the other player. This is repeated to a set search depth. The score of each of the boards after the search depth is then computed as a combination of the weights due to the locations of each piece, as well as the pieces that are left on the board. The best move is then completed by the chess engine. \n \n To improve this chessbot I am planning on implementing alpha-beta pruning to increase the speed of the computation, as well as implementing an adaptive search depth to allow the chessbot to search farther into the future when there are fewer legal moves.",
        "media_links" : ["/static/project_media/chess_engine.png"],
        "media_descriptions" : ["Chess Engine (playing as white) opening game"],
        "completion_date": "January 2025",
        "code_link": "https://github.com/listsarah/TheChessEngine"
    },
    {
        "title": "Coffee Table",
        "description": "Coffee Table made entirely out of reclaimed wood.",
        "skills" : ["Mechanical", "Manufacturing"],
        "what_it_does": "I found an old top of a table with a cool notched pattern in the bottom, so I collected some other scrapped wood and made this coffee table.",
        "technical_details": "Cut and painted small strips to fill the gaps in the table top. Put together and painted some legs and screwed them on. Finished table with polyurethane to protect the surface.",
        "media_links" : ["/static/project_media/table.jpg"],
        "media_descriptions" : ["Coffee Table"],
        "completion_date": "June 2023"
    }
]